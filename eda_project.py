# -*- coding: utf-8 -*-
"""EDA_project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1K-NUsV5PUoMJI72y7f2eoT75j69wXYQo

Data Cleaning
"""

# Importing Required Libraries

import pandas as pd
import numpy as np
from io import StringIO
import dataprep
from dataprep.eda import plot
import matplotlib.pyplot as plt
from pandas.plotting import scatter_matrix
import seaborn as sns
from sklearn.preprocessing import LabelEncoder

# Importing the Dataset

with open('TeleCom_Data (1).csv', 'r') as file:
  data = file.read().replace('"', '')
telecom_df = pd.read_csv(StringIO(data), sep=';')
telecom_df

# Column Descriptions
# telecom_df.info()
telecom_df.describe(include='all')

# Check for Duplicate Rows
duplicate_rows = telecom_df.duplicated().sum()
print(f"Number of duplicate rows before removing: {duplicate_rows}")
df = telecom_df.copy()
df = df.drop_duplicates()
df_d_rows = df.duplicated().sum()
print(f"Number of duplicate rows after removing: {df_d_rows}")
df.shape

# Check for Missing Values
df.isnull().sum()

# Check for Invalid Data Entries
df['age'].unique()
df['marital'].unique()
df['marital'].value_counts() # 80 unknown
df['job'].value_counts() # 330 unknown
df['education'].value_counts() # 1730 unknown
df['default'].value_counts() # 8595 unknown
df['housing'].value_counts() # 990 unknown
df['loan'].value_counts() # 990 unknown
df['contact'].value_counts()
df['month'].value_counts()
df['day_of_week'].value_counts()
df['duration'].value_counts()
df['campaign'].value_counts()
df['pdays'].value_counts()
df['previous'].value_counts()
df['poutcome'].value_counts() # 35547 nonexistent
df['emp.var.rate'].value_counts()
df['cons.price.idx'].value_counts()
df['cons.conf.idx'].value_counts()
df['euribor3m'].value_counts()
df['nr.employed'].value_counts()
df['y'].value_counts()

# Check for the Presence of Invalid Values
df[df['age']<0]
df[df['duration'] < 0]
df[df['campaign'] < 0]
df[df['pdays'] < 0]
df[df['previous'] < 0]

# Replace Missing or Invalid Values

df['marital'].mode() # married
df['marital'].replace('unknown', 'married', inplace=True)

df['job'].mode() # admin.
df['job'].replace('unknown', 'admin.', inplace=True)

for idx, row in df[df['education'] == 'unknown'].iterrows():
    age = row['age']

    if age < 18:
        df.at[idx, 'education'] = 'high.school'
    elif 18 <= age < 25:
        df.at[idx, 'education'] = 'university.degree'
    else:
        df.at[idx, 'education'] = 'professional.course'

df['housing'].mode() # yes
df['housing'].replace('unknown', 'yes', inplace=True)

df['loan'].mode() # no
df['loan'].replace('unknown', 'no', inplace=True)

df.head()

"""Data Visualisation"""

# check for outliers
# Descriptive statistics

plot(df, 'age')

plot(df, 'education')

plot(df, 'duration')

plot(df, 'previous')

# Bivariate Plots

fig , ax = plt.subplots(1, 3, figsize = (20,5))
ax[0].bar(df['month'], df['campaign'])
ax[1].bar(df['day_of_week'], df['campaign'])
ax[2].scatter(df['cons.conf.idx'], df['cons.price.idx'])
ax[0].set_title("Month vs. Campaign")
ax[1].set_title("Day vs. Campaign")
ax[2].set_title("Cons.conf.idx vs. Cons.price.idx")
ax[0].set_xlabel("month")
ax[0].set_ylabel("campaign")
ax[1].set_xlabel("day")
ax[1].set_ylabel("campaign")
ax[2].set_xlabel("cons.conf.idx")
ax[2].set_ylabel("cons.price.idx")
plt.show()

# Scatter Matrix
matrix = scatter_matrix(df,figsize=(12,12))

# Count Plot: Job vs. y
import seaborn as sns
import matplotlib.pyplot as plt

sns.set(style="darkgrid")
plt.figure(figsize=(12, 6))
sns.countplot(x='job', hue='y', data=df, palette='Set2')
plt.title('Job vs. Response Variable (y)')
plt.xlabel('job')
plt.xticks(rotation=45)
plt.ylabel('count (y)')
plt.legend(title='y')
plt.show()

# Distribution of Positive and Negative Responses Across Different Job Categories
job_counts = df.groupby(['job', 'y']).size().unstack(fill_value=0)
job_percentage = job_counts.div(job_counts.sum(axis=1), axis=0) * 100
job_percentage_sorted = job_percentage.sort_values(by='yes',ascending=False)
job_percentage_sorted

# Box Plot: Age vs. y
plt.figure(figsize=(12, 6))
sns.boxplot(x='y', y='age', data=df, palette="Set2")
plt.title('Age vs. Response Variable (y)')
plt.xlabel('y')
plt.ylabel('age')
plt.show()

# Distribution of Positive and Negative Responses Across Different Age Groups
Q1 = df['age'].quantile(0.25)
Q3 = df['age'].quantile(0.75)
IQR = Q3 - Q1
df_no_outliers = df[~((df['age'] < (Q1 - 1.5 * IQR)) | (df['age'] > (Q3 + 1.5 * IQR)))]
age_counts = df_no_outliers.groupby(['age', 'y']).size().unstack(fill_value=0)
age_percentage = age_counts.div(age_counts.sum(axis=1), axis=0) * 100
age_percentage
age_percentage_sorted = age_percentage.sort_values(by='yes',ascending=False)
age_percentage_sorted.head(10)

# Bar Plot: Education vs. y
plt.figure(figsize=(12, 6))
sns.countplot(x='education', hue='y', data=df, palette="Set2")
plt.title('Education vs. Response Variable (y)')
plt.xlabel('education')
plt.ylabel('count (y)')
plt.legend(title='y')
plt.show()

# Box Plot: Duration vs. y
plt.figure(figsize=(12, 6))
sns.boxplot(x='y', y='duration', data=df, palette="Set2")
plt.title('Duration vs. Response Variable (y)')
plt.xlabel('y')
plt.ylabel('duration')
plt.show()

# Violin Plot: Job/Age vs. y
plt.figure(figsize=(12, 6))
sns.violinplot(x='job', y='age', data=df, hue="y", palette="Set2")
plt.title('Job/Age vs. Response Variable (y)')
plt.xticks(rotation=45)
plt.xlabel('job')
plt.ylabel('age')
plt.show()

# Scatter plot: Age vs. Current Calls
sns.scatterplot(x='age', y='campaign', data=df)
plt.title('Age vs. Number of Current Calls')
plt.xlabel('age')
plt.ylabel('number of current calls')
plt.show()

df_copy = df.copy()

le = LabelEncoder()
df_copy['job'] = le.fit_transform(df_copy['job'])
df_copy['contact'] = le.fit_transform(df_copy['contact'])

mapping = {'illiterate': 0,
           'basic.4y' : 1,
           'basic.6y' : 2,
           'basic.9y' : 3,
           'high.school' : 4,
           'university.degree' : 5,
           'professional.course' : 6}

mapping1 = {'no': 0,'yes' : 1,'unknown' : -1}
mapping2 = {'no': 0,'yes' : 1,}
mapping3 = {'mon' : 1,'tue' : 2,'wed' : 3,'thu' : 4,'fri' : 5}
mapping4 = {'jan' : 1,'feb' : 2,'mar' : 3,'apr' : 4,'may': 5,'jun' : 6,'jul' : 7,'aug' : 8,'sep' : 9,'oct' : 10,'nov' : 11,'dec' : 12}
mapping5 = {'failure': 0,'success' : 1,'nonexistent' : -1}

df_copy['education'] = df['education'].map(mapping)
df_copy['default'] = df['default'].map(mapping1)
df_copy['housing'] = df['housing'].map(mapping2)
df_copy['loan'] = df['loan'].map(mapping2)
df_copy['y'] = df['y'].map(mapping2)
df_copy['day_of_week'] = df['day_of_week'].map(mapping3)
df_copy['month'] = df['month'].map(mapping4)
df_copy['poutcome'] = df['poutcome'].map(mapping5)

dummies = pd.get_dummies(df_copy['marital'])
encoded_df = pd.concat([df_copy, dummies], axis=1)
encoded_df.drop(columns=['marital'],inplace=True)

encoded_df

encoded_df.corr()

sns.heatmap(df_copy.corr(), cmap='coolwarm')